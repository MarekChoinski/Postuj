{"version":3,"sources":["contexts/ThemeContext.tsx","App.tsx","serviceWorker.ts","state/ducks/posts/types.ts","state/ducks/posts/reducers.ts","state/ducks/posts/index.ts","state/ducks/auth/types.ts","state/ducks/auth/reducers.ts","state/ducks/auth/index.ts","state/store.ts","index.tsx","configs/firebaseConfig.js"],"names":["ThemeContext","createContext","theme","setTheme","ThemeContextProvider","props","children","useState","Provider","value","App","useContext","className","Boolean","window","location","hostname","match","SortMethod","initialState","actualPage","sortMethod","types","Newest","reducer","state","action","type","payload","postsReducer","SIGN_IN","SIGN_OUT","authError","console","log","error","authReducer","extraArguments","getFirebase","getFirestore","middlewares","thunk","withExtraArgument","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","firebaseInstance","reduxStore","createStore","combineReducers","reducers","firebaseReducer","firestoreReducer","compose","applyMiddleware","reduxFirestore","RootHtml","store","config","userProfile","useFirestoreForProfile","dispatch","createFirestoreInstance","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2UAYaA,EAAeC,wBAAc,CACxCC,MARmB,QASnBC,SALgC,iBAJb,WA8BNC,EAd+B,SAAAC,GAAU,IAE9CC,EAAaD,EAAbC,SAF6C,EAI3BC,mBAAqB,SAJM,mBAI9CL,EAJ8C,KAIvCC,EAJuC,KAMrD,OACE,kBAACH,EAAaQ,SAAd,CAAuBC,MAAO,CAAEP,QAAOC,aACpCG,ICsBQI,EA9BO,WAAO,IAEnBR,EAAUS,qBAAWX,GAArBE,MAER,OACE,0BAAMU,UAAWV,GACf,0BAAMU,UAAU,QAGd,yBAAKA,UAAU,iBAAf,UClBYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICDMC,E,4DAAAA,K,gBAAAA,E,UAAAA,E,YAAAA,E,cAAAA,E,cAAAA,E,wBAAAA,E,kBAAAA,E,4BAAAA,E,sCAAAA,E,0BAAAA,E,oCAAAA,E,qBAAAA,M,KCdZ,IAAMC,EAAiC,CACnCC,WAAY,EACZC,WAAYC,EAAiBC,QAsBlBC,EAlBC,WAGQ,IAFpBC,EAEmB,uDAFXN,EACRO,EACmB,uCAEnB,OAAQA,EAAOC,MAEX,IDduB,+BCgBnB,OAAO,2BACAF,GACAC,EAAOE,SAElB,QACI,OAAOH,I,oCCPJI,IChBFC,EAAU,sBACVC,EAAW,uBCElBZ,EAAoB,CACtBa,UAAW,MAiCAR,EA7BC,WAGO,IAFnBC,EAEkB,uDAFVN,EACRO,EACkB,uCAElB,OAAQA,EAAOC,MACX,KAAKL,EAGD,OAFAW,QAAQC,IAAIR,GAELA,EAAOS,MAAP,2BAEIV,GAFJ,IAGCO,UAAWN,EAAOE,QAAQO,QAH3B,2BAMIV,GANJ,IAOCO,UAAW,OAGvB,KAAKV,EACD,OAAOI,EAAOS,MACVV,EAGR,QACI,OAAOA,ICjBJW,G,OAAAA,GCNTC,EAAiB,CAAEC,0BAAaC,6BAEhCC,EAAc,CAChBC,IAAMC,kBAAkBL,I,2BCU5BM,IAASC,cCnBqB,CAC1BC,OAAQ,0CACRC,WAAY,+BACZC,YAAa,sCACbC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBDYnBT,IAASU,YAMT,IDduCC,ECcjCC,GDdiCD,ECcLX,IDbvBa,sBACHC,0BAAgB,2BACTC,GADQ,IAEXf,SAAUgB,kBACVN,UAAWO,sBAEfC,kBAGUC,kBAAe,WAAf,EAAmBtB,GACzBuB,yBAAeT,MCKrBU,EAAW,kBACb,kBAAC,EAAD,KACI,kBAAC,IAAD,CAAeC,MAAOV,GAClB,kBAAC,6BAAD,CACIZ,SAAUA,IACVuB,OAAQ,CACJC,YAAa,QACbC,wBAAwB,GAE5BC,SAAUd,EAAWc,SACrBC,wBAAyBA,2BACzB,kBAAC,EAAD,UAMhBC,IAASC,OAAO,kBAAC,EAAD,MAAcC,SAASC,eAAe,SRwFhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ea52f038.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react';\r\n\r\ntype themeTypes = \"light\" | \"mood\" | \"dark\";\r\ntype UpdateType = React.Dispatch<React.SetStateAction<themeTypes>>;\r\n\r\nconst defaultTheme = \"light\";\r\n\r\n// export const ThemeContext = createContext<themeTypes>(\"light\");\r\n\r\nconst defaultUpdate: UpdateType = () => defaultTheme;\r\n\r\n\r\nexport const ThemeContext = createContext({\r\n  theme: defaultTheme,\r\n  setTheme: defaultUpdate\r\n});\r\n\r\ntype Props = {\r\n  children: React.ReactNode,\r\n};\r\n\r\nconst ThemeContextProvider: React.FC<Props> = props => {\r\n\r\n  const { children } = props;\r\n\r\n  const [theme, setTheme] = useState<themeTypes>(\"light\");\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, setTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n\r\n};\r\n\r\nexport default ThemeContextProvider;\r\n","import React, { useContext } from 'react';\r\n\r\nimport ThemeSwitch from './components/ThemeSwitch';\r\nimport './styles/index.scss'\r\nimport MenuBar from './components/MenuBar';\r\nimport Mainpage from './pages/Mainpage';\r\nimport Page404 from './pages/Page404';\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  // Link\r\n} from \"react-router-dom\";\r\nimport PostPage from './pages/PostPage';\r\nimport SignUpPage from './pages/SignUpPage';\r\nimport LoginPage from './pages/LoginPage';\r\nimport ProfilePage from './pages/ProfilePage';\r\n\r\nimport { ThemeContext } from './contexts/ThemeContext';\r\n\r\nconst App: React.FC = () => {\r\n\r\n  const { theme } = useContext(ThemeContext);\r\n\r\n  return (\r\n    <body className={theme}>\r\n      <main className=\"main\">\r\n        {/* <Router basename=\"/React\"> */}\r\n        {/* <MenuBar /> */}\r\n        <div className=\"main__wrapper\">\r\n          aha\r\n          {/* <ThemeSwitch /> */}\r\n          {/* <Mainpage /> */}\r\n          {/* <Switch>\r\n              <Route exact path=\"/\" component={Mainpage} />\r\n              <Route exact path=\"/signup\" component={SignUpPage} />\r\n              <Route exact path=\"/login\" component={LoginPage} />\r\n              <Route path=\"/post/:id\" component={PostPage} />\r\n              <Route path=\"/profile/:id\" component={ProfilePage} />\r\n              <Route path=\"*\" component={Page404} />\r\n            </Switch> */}\r\n\r\n        </div>\r\n        {/* </Router> */}\r\n      </main>\r\n    </body>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const ADD_POST = \"bloggy/posts/ADD_POST\";\r\nexport const DELETE_POST = \"bloggy/posts/DELETE_POST\";\r\nexport const SET_SORT_METHOD = \"bloggy/posts/SET_SORT_METHOD\";\r\nexport const SET_PROFILE_SORT_METHOD = \"bloggy/posts/SET_PROFILE_SORT_METHOD\";\r\nexport const ADD_POST_TO_FAVORITES = \"bloggy/posts/ADD_POST_TO_FAVORITES\";\r\nexport const REMOVE_POST_FROM_FAVORITES = \"bloggy/posts/REMOVE_POST_FROM_FAVORITES\";\r\nexport const LIKE_POST = \"bloggy/posts/LIKE_POST\";\r\nexport const UNLIKE_POST = \"bloggy/posts/UNLIKE_POST\";\r\n\r\nexport type Post = Readonly<{\r\n    content: string,\r\n    attachedPhoto?: string,\r\n    authorName: string,\r\n    date: string,\r\n    id: string,\r\n}>;\r\n\r\nexport enum SortMethod {\r\n    Newest = \"Newest\",\r\n    Top = \"Top\",\r\n    Top6 = \"Top6\",\r\n    Top12 = \"Top12\",\r\n    Top24 = \"Top24\",\r\n    NewestUser = \"NewestUser\",\r\n    TopUser = \"TopUser\",\r\n    FavoriteUser = \"FavoriteUser\",\r\n    FavoriteMyProfile = \"FavoriteMyProfile\",\r\n    LikedByUser = \"LikedByUser\",\r\n    LikedByMyProfile = \"LikedByMyProfile\",\r\n    Observed = \"Observed\",\r\n}\r\n\r\nexport interface PostsState {\r\n    readonly actualPage: number,\r\n    readonly sortMethod: SortMethod,\r\n    // readonly sortProfileMethod: string,\r\n}\r\n\r\ninterface AddPostAction {\r\n    type: typeof ADD_POST;\r\n    payload: Pick<Post, 'content' | 'attachedPhoto'>;\r\n}\r\n\r\ninterface DeletePostAction {\r\n    type: typeof DELETE_POST;\r\n    payload: Pick<Post, 'id'>;\r\n}\r\n\r\ninterface setSortMethod {\r\n    type: typeof SET_SORT_METHOD;\r\n    payload: {\r\n        sortMethod: SortMethod,\r\n    };\r\n}\r\n\r\n// interface setProfileSortMethod {\r\n//     type: typeof SET_PROFILE_SORT_METHOD;\r\n//     payload: {\r\n//         sortMethod: string,\r\n//     };\r\n// }\r\n\r\ninterface addPostToFavorites {\r\n    type: typeof ADD_POST_TO_FAVORITES;\r\n    payload: Pick<Post, 'id'>;\r\n}\r\n\r\ninterface removePostFromFavorites {\r\n    type: typeof REMOVE_POST_FROM_FAVORITES;\r\n    payload: Pick<Post, 'id'>;\r\n}\r\n\r\ninterface likePost {\r\n    type: typeof LIKE_POST;\r\n    payload: Pick<Post, 'id'>;\r\n}\r\n\r\ninterface unlikePost {\r\n    type: typeof UNLIKE_POST;\r\n    payload: Pick<Post, 'id'>;\r\n}\r\n\r\nexport type PostActionTypes =\r\n    AddPostAction |\r\n    setSortMethod |\r\n    // setProfileSortMethod |\r\n    addPostToFavorites |\r\n    removePostFromFavorites |\r\n    likePost |\r\n    unlikePost |\r\n    DeletePostAction;\r\n\r\n// export type TitleActionTypes = EditTitleAction;","import * as types from \"./types\";\r\n// import uuid from \"uuid\";\r\n\r\nconst initialState: types.PostsState = {\r\n    actualPage: 1,\r\n    sortMethod: types.SortMethod.Newest,\r\n    // sortProfileMethod: \"newest\",\r\n};\r\n\r\nconst reducer = (\r\n    state = initialState,\r\n    action: types.PostActionTypes// | types.TitleActionTypes\r\n): types.PostsState => {\r\n\r\n    switch (action.type) {\r\n        // case types.ADD_POST:\r\n        case types.SET_SORT_METHOD:\r\n            // case types.SET_PROFILE_SORT_METHOD:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import postsReducer from \"./reducers\";\r\nimport * as postsTypes from \"./types\";\r\n\r\nexport {\r\n    default as postsSelectors\r\n}\r\n    from \"./selectors\";\r\nexport {\r\n    default as postsOperations\r\n}\r\n    from \"./operations\";\r\n\r\nexport {\r\n    postsTypes\r\n};\r\n\r\nexport default postsReducer;","export const SIGN_IN = \"bloggy/auth/SIGN_IN\";\r\nexport const SIGN_OUT = \"bloggy/auth/SIGN_OUT\";\r\nexport const SIGN_UP = \"bloggy/auth/SIGN_UP\";\r\n\r\n\r\nexport interface AuthState {\r\n    readonly authError: string,\r\n}\r\n\r\ninterface SignInAction {\r\n    type: typeof SIGN_IN,\r\n    payload: {\r\n        error?: string\r\n    },\r\n    error?: boolean,\r\n}\r\ninterface SignOutAction {\r\n    type: typeof SIGN_OUT,\r\n    payload?: {\r\n        error: string\r\n    },\r\n    error?: boolean,\r\n}\r\ninterface SignUpAction {\r\n    type: typeof SIGN_UP,\r\n    payload: {\r\n        error?: string\r\n    },\r\n    error?: boolean,\r\n}\r\n\r\nexport type AuthActionTypes =\r\n    SignOutAction |\r\n    SignInAction |\r\n    SignUpAction;","import * as types from \"./types\";\r\n// import uuid from \"uuid\";\r\n\r\nconst initialState: any = {\r\n    authError: null,\r\n};\r\n\r\n\r\nconst reducer = (\r\n    state = initialState,\r\n    action: types.AuthActionTypes// | types.TitleActionTypes\r\n): types.AuthState => {\r\n\r\n    switch (action.type) {\r\n        case types.SIGN_IN:\r\n            console.log(action);\r\n\r\n            return action.error ?\r\n                {\r\n                    ...state,\r\n                    authError: action.payload.error,\r\n                }\r\n                : {\r\n                    ...state,\r\n                    authError: null,\r\n                }\r\n\r\n        case types.SIGN_OUT:\r\n            return action.error ?\r\n                state\r\n                : state;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import authReducer from \"./reducers\";\r\nimport * as authTypes from \"./types\";\r\n\r\nexport {\r\n    default as authSelectors\r\n}\r\n    from \"./selectors\";\r\nexport {\r\n    default as authOperations\r\n}\r\n    from \"./operations\";\r\n\r\nexport {\r\n    authTypes\r\n};\r\n\r\nexport default authReducer;","import { applyMiddleware, compose, combineReducers, createStore } from \"redux\"\r\nimport { composeWithDevTools } from \"redux-devtools-extension\"\r\nimport thunk from \"redux-thunk\"\r\nimport { getFirebase } from 'react-redux-firebase'\r\nimport { getFirestore, reduxFirestore } from 'redux-firestore'\r\nimport { firebaseReducer } from 'react-redux-firebase'\r\nimport { firestoreReducer } from 'redux-firestore';\r\n\r\nimport * as reducers from \"./ducks\"\r\n\r\nconst extraArguments = { getFirebase, getFirestore };\r\n\r\nconst middlewares = [\r\n    thunk.withExtraArgument(extraArguments)\r\n]\r\n\r\nexport default function configureStore(firebaseInstance: any) {\r\n    return createStore(\r\n        combineReducers({\r\n            ...reducers,\r\n            firebase: firebaseReducer,\r\n            firestore: firestoreReducer,\r\n        }),\r\n        compose(\r\n            (process.env.NODE_ENV !== \"production\") ?\r\n                composeWithDevTools(applyMiddleware(...middlewares))\r\n                : applyMiddleware(...middlewares),\r\n            reduxFirestore(firebaseInstance),\r\n        )\r\n    )\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport ThemeContextProvider from './contexts/ThemeContext';\r\nimport { ReactReduxFirebaseProvider } from 'react-redux-firebase';\r\nimport { createFirestoreInstance } from 'redux-firestore';\r\nimport configureStore from \"./state/store\";\r\nimport { firebaseConfig } from './configs/firebaseConfig'\r\n\r\n// import * as types from './state/types';\r\nimport {\r\n    createStore,\r\n    // applyMiddleware,\r\n    combineReducers\r\n} from \"redux\";\r\n\r\nimport {\r\n    Provider as ReduxProvider\r\n} from \"react-redux\";\r\nimport firebase from 'firebase';\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nfirebase.firestore();\r\n\r\n// export default firebase;\r\n\r\n\r\n\r\nconst reduxStore = configureStore(firebase);\r\n\r\nconst RootHtml = () => (\r\n    <ThemeContextProvider>\r\n        <ReduxProvider store={reduxStore} >\r\n            <ReactReduxFirebaseProvider\r\n                firebase={firebase}\r\n                config={{\r\n                    userProfile: \"users\",\r\n                    useFirestoreForProfile: true,\r\n                }}\r\n                dispatch={reduxStore.dispatch}\r\n                createFirestoreInstance={createFirestoreInstance}>\r\n                <App />\r\n            </ReactReduxFirebaseProvider>\r\n        </ReduxProvider>\r\n    </ThemeContextProvider>\r\n);\r\n\r\nReactDOM.render(<RootHtml />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// import firebase from 'firebase/app'\r\nimport 'firebase/firestore'\r\nimport 'firebase/auth'\r\n\r\nexport const firebaseConfig = {\r\n    apiKey: \"AIzaSyCFOLz8OeLn8y1KzDj8TDOAVtlHaZPNI8U\",\r\n    authDomain: \"bloggy-6cd0c.firebaseapp.com\",\r\n    databaseURL: \"https://bloggy-6cd0c.firebaseio.com\",\r\n    projectId: \"bloggy-6cd0c\",\r\n    storageBucket: \"bloggy-6cd0c.appspot.com\",\r\n    messagingSenderId: \"327002484739\",\r\n    appId: \"1:327002484739:web:bf59d6de79729d0e319e36\",\r\n    measurementId: \"G-SX35Q616LT\"\r\n};\r\n\r\n\r\n"],"sourceRoot":""}